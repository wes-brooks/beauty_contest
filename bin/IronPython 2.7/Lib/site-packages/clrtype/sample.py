#####################################################################################
#
#  Copyright (c) Microsoft Corporation. All rights reserved.
#
# This source code is subject to terms and conditions of the Microsoft Public License. A 
# copy of the license can be found in the License.html file at the root of this distribution. If 
# you cannot locate the  Microsoft Public License, please send an email to 
# ironpy@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
# by the terms of the Microsoft Public License.
#
# You must not remove this notice, or any other, from this software.
#
#
#####################################################################################

import clr
import clrtype
import System
from System.Reflection import BindingFlags
clr.AddReference("System.Runtime.Serialization")
from System.Runtime.Serialization import DataContractAttribute, DataMemberAttribute, IExtensibleDataObject, ExtensionDataObject, DataContractSerializer
from System.IO import MemoryStream


class IProduct(object):
    __metaclass__ = clrtype.ClrInterface

    _clrnamespace = "VBTools"   

    
    
    @property
    @clrtype.accepts()
    @clrtype.returns(str)
    def Name(self): raise RuntimeError("this should not get called")
      
    @property
    @clrtype.accepts()
    @clrtype.returns(float)
    def Cost(self): raise RuntimeError("this should not get called")
      
    @clrtype.accepts()
    @clrtype.returns(bool)
    def IsAvailable(self): raise RuntimeError("this should not get called")    
    

class Product(IProduct):
    DataContract = clrtype.attribute(DataContractAttribute)

    __metaclass__ = clrtype.ClrClass
    _clrnamespace = "VBTools"   
    _clrfields = { "name":str, "cost":float, "_quantity":int, "extensionData_Value":ExtensionDataObject }
    _field_attributes = {"cost":[DataMemberAttribute]}    
    _clrclassattribs = [DataContract()]

    def __init__(self, name, cost, quantity):
        self.name = name
        self.cost = cost
        self._quantity = quantity

    # IProduct methods    
    def Name(self): return self.name
    def Cost(self): return self.cost
    def IsAvailable(self): return self.quantity != 0

    @property
    @clrtype.accepts()
    @clrtype.returns(int)
    def quantity(self): return self._quantity
    
    @quantity.setter
    @clrtype.accepts(int)
    @clrtype.returns()
    def quantity(self, value): self._quantity = value

    @clrtype.accepts(float)
    @clrtype.returns(float)
    def calc_total(self, discount = 0.0):
        return (self.cost - discount) * self.quantity
        
    #ExtensionData methods
    @property
    @clrtype.accepts()
    @clrtype.returns(ExtensionDataObject)
    def ExtensionData(self): return self.extensionData_value
        
    @ExtensionData.setter
    @clrtype.accepts(ExtensionDataObject)
    @clrtype.returns()
    def ExtensionData(self, value): self.extensionData_value = value

    def Serialize(self):
        ms = MemoryStream()
        dcs = DataContractSerializer(self.GetType())
        return dcs
        dcs.WriteObject(ms, self)
        return ms

p = Product("Widget", 10.0, 42)

