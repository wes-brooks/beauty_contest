#! /usr/bin/env perl
use Getopt::Long;
use Cwd;

my $dbinstalllog =  "postjob.log";
print "Trying to open logfile... $dbinstalllog\n";
open(OLDOUT, ">&STDOUT");
open(OLDERR, ">&STDERR");
open(STDOUT, ">>$dbinstalllog") or die "Could not open $dbinstalllog: $!";
open(STDERR, ">&STDOUT");
select(STDERR);
 $| = 1;
select(STDOUT);
 $| = 1;

# Dagman passes node which maps to both where the job is running
$cwd = getcwd();
$results = $ARGV[0];
$job = $ARGV[1];
$clean = $ARGV[2];
# leave the user log and RESULT file for reporting
# and the splice file, submit file in case dagman
# needs to restart.
my @cleanpatterns = (
	"Audit",
	"ChtcWrapper",
	"CURL",
	"ENV",
	"process.err",
	"process.out",
);

print "Starting postjob here renaming data<$cwd-$results-$job>\n";

system("chmod 777 *");

my @results = glob("ZZZZZZ");
print "Results: @results\n";

my $resultcount = @results;

open(RES,">RESULT") or die "Can not open RESULT file:$!\n";

my $argcount = @ARGV;
if($argcount >= 2) {
	my $res = system("mkdir -p $results");
	if($res != 0) {
		print "Failed to make RESULTDIR<$results>\n";
	}
	$res = system("mkdir -p $results/$job");
	if($res != 0) {
		print "Failed to make JOB dir<$results/$job>\n";
	}
	foreach my $file (@results) {
		$res = system("mv $file $results/$job");
		if($res != 0) {
			print "Failed to make JOB dir<$results/$job>\n";
		}
	}
} else {
	if($argcount != 0) {
		die "0 or two args expected for postscript: got <$argcount>\n";
	}
}

if($resultcount == 0) {
	print RES "1\n";
	print "Job Failed\n";
	close(RES);
	exit(1);
} else {
	if(defined $clean) {
		foreach my $file (@cleanpatterns) {
			system("rm -f $file*");
		}
	}
	print RES "0\n";
	print "Job worked\n";
	close(RES);
}


exit(0);

# =================================
# print help
# =================================

sub help
{
    print "Usage: writefile.pl --megs=#
        Options:
            [-h/--help]                             See this
			\n";
}
