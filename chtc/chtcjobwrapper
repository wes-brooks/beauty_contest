#! /usr/bin/env perl
use Cwd;
use Getopt::Long;
use strict;
use warnings;

set_http_proxy();

$ENV{PATH} = "/usr/local/bin:/usr/kerberos/bin:/usr/bin:/bin";

# Some defines for our returns
my $ALLSWELL = 0;
my $FAILEDCURLWRAPPER = 1;
my $FAILEDCURLRUNTIME = 2;
my $CHECKSUMFAILED = 3;
my $NORUNTIME = 4;
my $UNTARRUNTIME = 5;
my $UNTARJOBDATA = 6;
my $FAILEDRLIBUNTAR = 7;
my $FAILEDRUN = 8;
my $MISSINGOUTPUT = 9;
my $BADUSAGE = 10;
my $NOCHECKSUM = 11;
my $FAILEDCURLCHECKSUM = 12;
my $FAILEDCURLSLIBS = 13;
my $FAILEDINFOFETCH = 14;
my $UNTARURL = 15 ;
my $UNTARBINDIR = 16 ;

my $stampfilename = "CURLTIME_$$";

system("printenv");

#print "Starting to run <$cmdtorun> <$unique> <@ARGV>\n";
#print "Using <$type> <$tarball> <$installfrom>\n";

my $wrapper = "chtcinnerwrapper";
my $curlres = 0;

my $localproxy = "no";
$localproxy = MachineAdTest("IsEuclid");
print "Euclid test returned <$localproxy>\n";

if($localproxy eq "yes") {
	$curlres = FetchViaCurl($wrapper,"http://10.0.3.5/SQUID/","$stampfilename");
} else {
	$curlres = FetchViaCurl($wrapper,"http://proxy.chtc.wisc.edu/SQUID/","$stampfilename");
}

if($curlres != 0) {
    print "Fetch of runtime <$wrapper> failed via curl\n";
	exit($FAILEDCURLWRAPPER);
}

system("chmod 755 $wrapper");
if($ARGV[0] eq "--help") {
	system("./$wrapper --help");
	exit(0);
}


my $res = system("./$wrapper @ARGV");
print "Done Running $wrapper Result was <$res>\n";
ExplainFailure($res);

sub ExplainFailure
{
	my $result = shift;

	#system puts error code in upper 8 bits
	if($result & 0xff00) {
		$result >>= 8;
	} 

	if($result == $ALLSWELL) {
		print "All went well!\n";
		exit($result);
	} elsif($result == $FAILEDCURLWRAPPER) {
		print "Failed to curl fetch real wrapper\n";
	} elsif($result == $FAILEDCURLRUNTIME) {
		print "Failed to curl runtime\n";
	} elsif($result == $CHECKSUMFAILED) {
		print "Checksum for runtime failed\n";
	} elsif($result == $NORUNTIME) {
		print "There is no runtime!\n";
	} elsif($result == $UNTARRUNTIME) {
		print "Untar of runtime failed\n";
	} elsif($result == $UNTARJOBDATA) {
		print "Untar of job data failed\n";
	} elsif($result == $FAILEDRLIBUNTAR) {
		print "Failed to extract R packages\n";
	} elsif($result == $FAILEDRUN) {
		print "Run failed\n";
	} elsif($result == $MISSINGOUTPUT) {
		print "Failed to find expected output\n";
	} elsif($result == $BADUSAGE) {
		print "run rungeneric.pl --help for full usage help\n";
	} elsif($result = $NOCHECKSUM) {
		print "Could not find checksum file\n";
	} elsif($result = $FAILEDCURLCHECKSUM) {
		print "Could not CURL checksum file\n";
	} else {
		print "Unexpected result from job\n";
	}

	system("touch CODEBLOWUP");
	exit($result);
}

sub FetchViaCurl
{
	my $target = shift;
	my $url = shift;
	my $unique = shift;

	my $tries = 30;
	my $trycount = 0;
	my $sleeptime = 6;
	my $starttime = time();
	
	while($trycount < $tries) {
		print "Calling curl to fetch $target try $trycount\n";
		$curlres = system("curl -H \"Pragma:\" --fail -o $target $url$target");
		# trace data per attempt
		my $stoptime = time();
		my $elapsed = $stoptime - $starttime;
		my $fetchfile = "$url$target";
		my $result = $curlres >>=8;
		my $signal = $curlres & 255;
		write_audit_message("CURL",(url=>$fetchfile,time=>$elapsed,signal=>$signal,result=>$result));
		if($curlres != 0) {
			$trycount += 1;
			sleep($sleeptime);
		} else {
			last;
		}
	}
	print "Curl error <$curlres>\n";
	return($curlres);
}

#	I don't care strongly about the filename, but as a straw man:
#	"AuditLog.$unique"?

#	I propose the following for the records:

#	TIMESTAMP TYPE key=value key=value key=value

#	- TIMESTAMP can be anything easy to parse.
#	- TYPE is unique identified for that type of record
#	- keys and values are forbidden from having spaces in them (to
#	  simplify parsing).  We'll probably want some sort of simple
#	  escaping mechanism.  Perhaps s/\\/\\\\/g; s/_/\\_/g; s/ /_/g;
#	- Might want to sort keys within a given record.

#	so for example
#	2011-04-18 14:35 CURL duration=32 url=http://www.example.com/foo/bar result=1
#	2011-04-17 15:22 EXIT cmd=R return=0 signal=7


#	proposed API:

#	sub write_audit_message {
#	my($type, %keys) = @_;
#	# Write log here.
#	}


sub write_audit_message {
	open(STAMP,">>$stampfilename");
	my($type, %classad) = @_;
	print STAMP ( timestamp(), " $type ");
	foreach my $key (sort keys (%classad)) {
		my $filter = $classad{$key};
		$filter =~ s/>/GT/g;
		print STAMP "$key=<$filter> ";
	}
	print STAMP "\n";
	close(STAMP);
}

sub timestamp {
    return scalar localtime();
}


sub MachineAdTest
{
    my $pattern = shift;
    my $answer = "no";
    my $line = "";
    print "MachineAdTest: looking for <$pattern>\n";

    open(MA,"<.machine.ad") or return($answer);
    while(<MA>) {
        chomp();
        $line = $_;
        if($line =~ /^.*$pattern.*$/) {
            $answer = "yes";
        }
    }
    return($answer);
}


sub set_http_proxy {
	if(exists $ENV{'http_proxy'}) {
		if(not exists $ENV{'HTTP_PROXY'}) {
			# Unlikely, but just in case.
			$ENV{'HTTP_PROXY'} = $ENV{'http_proxy'};
		}
		return;
	}
	if(exists $ENV{'HTTP_PROXY'}) {
		$ENV{'http_proxy'} = $ENV{'HTTP_PROXY'};
	}
	if(exists $ENV{'OSG_SQUID_LOCATION'} &&
		length $ENV{'OSG_SQUID_LOCATION'} &&
		$ENV{'OSG_SQUID_LOCATION'} ne 'UNAVAILABLE') {
		$ENV{'HTTP_PROXY'} = $ENV{'OSG_SQUID_LOCATION'};
		$ENV{'http_proxy'} = $ENV{'HTTP_PROXY'};
	}
}
